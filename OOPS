OOPs (Object-Oriented Programming System)
Object means a real-world entity such as a pen, chair, table, computer, watch, etc. 
Object-Oriented Programming is a methodology or paradigm to design a program using classes and objects. It simplifies software development and maintenance by providing some concepts:

Object
------
Any entity that has state and behavior is known as an object. For example, a chair, pen, table, keyboard, bike, etc. It can be physical or logical.
Example: A dog is an object because it has states like color, name, breed, etc. as well as behaviors like wagging the tail, barking, eating, etc.

Class:-
-------
Collection of objects is called class. It is a logical entity.
A class can also be defined as a blueprint from which you can create an individual object. Class doesn't consume any space.

Inheritance:-
------------
When one object acquires all the properties and behaviors of a parent object, it is known as inheritance. It provides code reusability. It is used to achieve runtime polymorphism.

Polymorphism:-
-------------
Perfoming a same task in many ways is called Polymorphism.
Eg: A men can be teacher in class and principal in college and father as in home.
Overloading and Overriding is used in Polymorphism.

Abstraction:-
------------
Hiding all the internal details and showing the functions which are required for user.
Example: Phone processing

Encapsulation:-
---------------
Adding different features into old code is called encapsulation.
Example:-A capsule.

Apart from these concepts, there are some other terms which are used in Object-Oriented design:
Coupling:-
---------
information or dependency of another class. It arises when classes are aware of each other. If a class has the details information of another class, there is strong coupling. In Java, we use private, protected, and public modifiers to display the visibility level of a class, method, and field.
We can use interfaces for the weaker coupling because there is no concrete implementation.

Cohesion:-
----------
 A single well-defined task is done by a highly cohesive method. The weakly cohesive method will split the task into separate parts. The java.io package is a highly cohesive package because it has I/O related classes and interface. However, the java.util package is a weakly cohesive package because it has unrelated classes and interfaces.

Association:-
------------
It represents the relationship between the objects. Here, one object can be associated with one object or many objects. There can be four types of association between the objects:

One to One --> For example, One country can have one prime minister 
One to Many --> For example,a prime minister can have many ministers
Many to One --> For example,many MP's can have one prime minister
Many to Many --> For example,many ministers can have many departments

Association can be undirectional or bidirectional.

Aggregation:-
-------------
It represents the relationship where one object contains other objects as a part of its state.
It represents the weak relationship between objects.
It as a has-a relationship in Java.
inheritance represents the is-a relationship.

Composition:-
------------
The composition represents the relationship where one object contains other objects as a part of its state. There is a strong relationship between the containing object and the dependent object. It is the state where containing objects do not have an independent existence. If you delete the parent object, all the child objects will be deleted automatically.

Advantage of OOPs over Procedure-oriented programming language:
--------------------------------------------------------------
1.OOPs makes development and maintenance easier.
2.OOPs provide data hiding which helsp to decrease the size of project.
3.OOPs provides the ability to simulate real-world event much more effectively.

