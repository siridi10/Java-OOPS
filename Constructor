Constructor is a block of codes similar to the method.
It is called when an instance of the class is created.
At the time of calling constructor, memory for the object is allocated in the memory.
It is a special type of method which is used to initialize the object.
Every time an object is created using the new() keyword, at least one constructor is called.
It calls a default constructor if there is no constructor available in the class.
Note: It is called constructor because it constructs the values at the time of object creation.

Rules for creating Java constructor
-----------------------------------
Constructor name must be the same as its class name
A Constructor must have no explicit return type
A Java constructor cannot be abstract, static, final, and synchronized
We can use access modifiers while declaring a constructor. It controls the object creation
The default constructor is used to provide the "default values to the object like 0, null," etc.


Types of Java constructors
----------------------------
There are two types of constructors:-

1.Default constructor (no-arg constructor)
-----------------------------------------
A constructor is called "Default Constructor" when it doesn't have any parameter.

Syntax
------
<class_name>(){}

Example:-
---------
class Bike1{  
Bike1(){System.out.println("Bike is created");}  
public static void main(String args[]){  
Bike1 b=new Bike1();  
}  
}  
Output:
Bike is created

2.Parameterized constructor
---------------------------
A constructor which has a specific number of parameters is called a parameterized constructor.
The parameterized constructor is used to provide different values to distinct objects.

Syntax:-
-------
<class_name>(int a,String n){} 

Example:-
--------
class Student4{  
    int id;  
    String name;  
    //creating a parameterized constructor  
    Student4(int i,String n){  
    id = i;  
    name = n;  
    }  
    //method to display the values  
    void display(){System.out.println(id+" "+name);}  
   
    public static void main(String args[]){  
    //creating objects and passing values  
    Student4 s1 = new Student4(111,"Karan");  
    Student4 s2 = new Student4(222,"Aryan");  
    //calling method to display the values of object  
    s1.display();  
    s2.display();  
   }  
}  
Output:
111 Karan
222 Aryan


Constructor Overloading
-----------------------
Constructor overloading is a technique of having more than one constructor with different parameter lists.
They are arranged in a way that each constructor performs a different task.
They are differentiated by the compiler by the number of parameters in the list and their types.

Example:-
--------
//Java program to overload constructors  
class Student5{  
    int id;  
    String name;  
    int age;  
    //creating two arg constructor  
    Student5(int i,String n){  
    id = i;  
    name = n;  
    }  
    //creating three arg constructor  
    Student5(int i,String n,int a){  
    id = i;  
    name = n;  
    age=a;  
    }  
    void display(){System.out.println(id+" "+name+" "+age);}  
   
    public static void main(String args[]){  
    Student5 s1 = new Student5(111,"Karan");  
    Student5 s2 = new Student5(222,"Aryan",25);  
    s1.display();  
    s2.display();  
   }  
}  
Output:
111 Karan 0
222 Aryan 25


Difference between constructor and method
-------------------------------------------------------------------------------------------------------------------------
|             Java Constructor	                                                    Java Method                          |
-------------------------------------------------------------------------------------------------------------------------
|1.Itis used to initialize the state of an object.	    |      A method is used to expose the behavior of an object.     |
|2.It must not have a return type.	                    |      A method must have a return type.                         |
|3.It is invoked implicitly.	                          |      The method is invoked explicitly.                         |
|4.Java compiler provides a default constructor if      |      The method is not provided by the compiler in any case.   |
| you don't have any constructor.                       |                                                                |
|5.It name must be same as the class name.	            |      The method name may or may not be same as the class name. |
--------------------------------------------------------------------------------------------------------------------------


Java Copy Constructor;-
----------------------
There is no copy constructor in Java. 
However, we can copy the values from one object to another like copy constructor in C++.
There are many ways to copy the values of one object into another in Java. They are:
By constructor
By assigning the values of one object into another
By clone() method of Object class


1.Can constructor perform other tasks instead of initialization?
Yes, like object creation, starting a thread, calling a method, etc. You can perform any operation in the constructor as you perform in the method.

2.Is there Constructor class in Java?
Yes.

3.What is the purpose of Constructor class?
Java provides a Constructor class which can be used to get the internal information of a constructor in the class. It is found in the java.lang.reflect package.


